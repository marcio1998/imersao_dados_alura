# -*- coding: utf-8 -*-
"""aula_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s3Eq2RJcdKHhdACILZAhEz8n2nULDY3b
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

url_dados = 'https://github.com/alura-cursos/imersaodados3/blob/main/dados/dados_experimentos.zip?raw=true'
dados = pd.read_csv(url_dados, compression='zip')#compression para abrir um arquivo zip
url_dados_2 = 'https://github.com/alura-cursos/imersao-dados-desafio-final/blob/main/Dados/dados_resultados.csv?raw=true'
dados_resultados = pd.read_csv(url_dados_2)#compression para abrir um arquivo zip
dados_resultados.head()

dados_resultados['n_moa'] = dados_resultados.drop('id', axis=1).sum(axis = 1)
dados_resultados['ativo_moa'] = (dados_resultados['n_moa'] != 0)

dados_combinados = pd.merge(dados, dados_resultados[['id','n_moa', 'ativo_moa']], on='id')
dados_combinados.head()

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x,y, test_size = 0.2, random_state = 376, stratify = y)
modelo_r_logistica = LogisticRegression(max_iter=1000)
modelo_r_logistica.fit(x_treino,y_treino)
modelo_r_logistica.score(x_teste, y_teste)

from sklearn.dummy import DummyClassifier
from sklearn.metrics import accuracy_score
modelo_dummy = DummyClassifier('most_frequent')
modelo_dummy.fit(x_treino, y_treino)
previsao_dummy = modelo_dummy.predict(x_teste)
accuracy_score(y_teste, previsao_dummy)

from sklearn.tree import DecisionTreeClassifier
x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x,y, test_size = 0.2, random_state = 376, stratify = y)
modelo_arvore = DecisionTreeClassifier(max_depth = 3)
modelo_arvore.fit(x_treino, y_treino)
modelo_arvore.score(x_teste, y_teste)

from sklearn.tree import DecisionTreeClassifier
x = dados_combinados.select_dtypes('float64')
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x,y, test_size = 0.2, random_state = 376, stratify = y)
teste = []
treino = []
for i in range(1,15):
  modelo_arvore = DecisionTreeClassifier(max_depth = i)
  modelo_arvore.fit(x_treino, y_treino)
  teste.append(modelo_arvore.score(x_teste, y_teste))
  treino.append(modelo_arvore.score(x_treino, y_treino))

teste

treino

sns.lineplot(x=range(1,15), y = teste, label= 'teste')
sns.lineplot(x=range(1,15), y = treino, label= 'treino')

pd.get_dummies(dados_combinados['tratamento'])

pd.get_dummies(dados_combinados, columns=['dose', 'tratamento','tempo'])

from sklearn.ensemble import RandomForestClassifier 
x = dados_combinados.drop(['id', 'n_moa','ativo_moa', 'droga'], axis=1)
x= pd.get_dummies(x, columns=['tratamento', 'dose', 'tempo'])
y = dados_combinados['ativo_moa']
x_treino, x_teste, y_treino, y_teste = train_test_split(x,y, test_size = 0.2, random_state = 376, stratify = y)
modelo_random_forest = RandomForestClassifier()
modelo_random_forest.fit(x_treino, y_treino)
modelo_random_forest.score(x_teste, y_teste)